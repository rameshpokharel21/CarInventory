
@page "/"
@page "/inventoryhome"

@rendermode InteractiveServer

@inject ICarDataService CarsDataService
@inject NavigationManager NavigationManager


<PageTitle>Car Inventory</PageTitle>
<h3>Car Inventory</h3>
<div>
    <QuickGrid Items="@AllCars" Pagination="@pagination" Class="table table-striped">
        <PropertyColumn Property="@(car => car.CarId)" Title="Car-Id" Sortable="true" />
        <PropertyColumn Property="@(car => car.InventoryId)" Title="Inventory-Id" Sortable="true"  />
        <PropertyColumn Property="@(car => car.Make)" Sortable="true"  />
        <PropertyColumn Property="@(car => car.Model)" Sortable="true" />
        <PropertyColumn Property="@(car => car.Trim)" Sortable="true"  />
        <PropertyColumn Property="@(car => car.Price)" Sortable="true" />
        <TemplateColumn Title="Actions">

            <button @onclick="@(() => HandleEdit(context.CarId))">Edit</button>
           
            <button @onclick="@(() => HandleDelete(context))">Delete</button>
            
        </TemplateColumn>
      
    </QuickGrid>
    <Paginator State="@pagination"/>
</div>

<br/>
<br/>


@code
{

    private IQueryable<Car>? AllCars{ get; set; }

 
    protected override async Task OnInitializedAsync()
    {


        AllCars = (await CarsDataService!.GetAllCars()).AsQueryable();


    }

    private PaginationState pagination = new PaginationState { ItemsPerPage = 5};



    private async Task HandleEdit(int carid)
    {
        if(carid == 0)
        {
            return;
        }
    

        NavigationManager.NavigateTo($"/inventoryedit/{carid}", forceLoad: true);


        await Task.CompletedTask;

    }
    

    private async Task HandleDelete(Car car)
    {
        if(car is null)
        {
            return;
        }
        await CarsDataService.DeleteCar(car.CarId);

        NavigationManager.NavigateTo("/inventoryhome", forceLoad: true);
        

    }

}
