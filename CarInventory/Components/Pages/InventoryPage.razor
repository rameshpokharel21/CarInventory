
@page "/carinventory"

@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject CarInventoryDbContext Context
@inject NavigationManager NavigationManger


<PageTitle>Car Inventory</PageTitle>
<h3>Car Inventory</h3>
<div>
    <QuickGrid Items="@Context.Cars" Pagination="@pagination" Class="table table-striped">
        <PropertyColumn Property="@(p => p.CarId)" Title="Car-Id" Sortable="true" />
        <PropertyColumn Property="@(p => p.InventoryId)" Title="Inventory-Id" Sortable="true" />
        <PropertyColumn Property="@(p => p.Make)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Model)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Trim)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Price)" Sortable="false" />
        <TemplateColumn Title="Actions">
            <button @onclick="@HandleEdit">Edit</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="@pagination"/>
</div>

<br/>
<br/>
<hr/>

<div>
     <EditForm Model="MakeName" OnSubmit="OnSubmit" Enhance FormName="SearchCarMake">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="row mb-3">
                <label for="inv" class="col-form-label col-md-3">Make: </label>
                <div class="col-md-8">
                    <InputText id="inv" class="form-control col-md-3" @bind-Value="@MakeName" placeholder="Enter car manufacturer"></InputText>
                </div>
            </div>
            <div>
                <button type="submit" class="btn btn-outline-primary ms-1">Submit</button>
            </div>

    </EditForm>

    @if(@CarsListByMake is not null && @CarsListByMake.ToList().Count > 0)
           
    {
        <QuickGrid Items="@CarsListByMake"  Class="table table-striped">
            <PropertyColumn Property="@(p => p.CarId)" Title="Car-Id" Sortable="true" />
            <PropertyColumn Property="@(p => p.InventoryId)" Title="Inventory-Id" Sortable="true" />
            <PropertyColumn Property="@(p => p.Make)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Model)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Trim)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Price)" Sortable="false" />
            
        </QuickGrid>
    }
    else
    {
    <h4 class="alert alert-danger text-center">No Data Available.</h4>
    }
</div>

@code
{

    public IQueryable<Car> CarsListByMake { get; set; } = default!;


    [Inject]
    public ICarDataService? CarsDataService{ get; set; }

    [SupplyParameterFromForm]
    public string? MakeName{get; set;}

    protected override void OnInitialized()
    {
        MakeName = string.Empty;

    }

    PaginationState pagination = new PaginationState { ItemsPerPage = 3 };



    private async Task OnSubmit()
    {
        CarsListByMake =  (await CarsDataService.GetCarsByMake(MakeName)).AsQueryable();


    }

    private void  HandleEdit()
    {
        NavigationManger.NavigateTo("/inventoryEdit");
        
    }

}
