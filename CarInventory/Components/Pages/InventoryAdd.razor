
@page "/inventoryadd"


@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ICarDataService CarsDataService
@inject IInventoryDataService InventoryDataService

<PageTitle>Add Car To Inventory</PageTitle>
<h3>Add Car to Inventory</h3>


@if (Car is not null)
{
    <EditForm Model="@Car" OnValidSubmit="@OnSubmit"
              Enhance FormName="CarForm">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row mb-3">
            <label for="inv" class="col-form-label col-md-3">Inventory Id: </label>
            <div class="col-md-8">
                <InputSelect id="inv" class="form-select col-md-8" @bind-Value="@Car.InventoryId">
                    @foreach (var inventory in InventoryList)
                    {
                        <option value="@inventory.InventoryId" oncontextmenu="">@inventory.InventoryId</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="row mb-3">
            <label for="make" class="col-form-label col-md-3">Make Name: </label>
            <div class="col-md-8">
                <InputText id="make" class="form-control col-md-8" @bind-Value="@Car.Make" placeholder="Enter Make name"></InputText>
                <ValidationMessage For="() => Car.Make" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="model" class="col-form-label col-md-3">Model Type: </label>
            <div class="col-md-8">
                <InputText id="model" class="form-control col-md-8" @bind-Value="@Car.Model" placeholder="Enter model name"></InputText>
                <ValidationMessage For="() => Car.Model" />
            </div>

        </div>



        <div class="row mb-3">
            <label for="year" class="col-form-label col-md-3">Year: </label>
            <div class="col-md-8">
                <InputNumber id="year" class="form-control col-md-8" @bind-Value="@Car.Year" placeholder="Enter year"></InputNumber>
                <ValidationMessage For="() => Car.Year" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="price" class="col-form-label col-md-3">Price: </label>
            <div class="col-md-8">
                <InputNumber id="price" class="form-control col-md-8" @bind-Value="@Car.Price" placeholder="Enter car price"></InputNumber>
                <ValidationMessage For="() => Car.Price" />
            </div>
        </div>

        <div class="row mb-3">
            <label for="trim" class="col-form-label col-md-3">Trim: </label>
            <div class="col-md-8">
                <InputText id="trim" class="form-control col-md-8" @bind-Value="@Car.Trim" placeholder="Enter trim type"></InputText>
            </div>
        </div>

       
        

        <div>
           
            <button type="submit" class="btn btn-success ms-1"
                    >
                Submit
            </button>
        </div>
        <br/>
        <div>
            <button type="button" class="btn btn-outline-dark ms-1"
                    @onclick="@NavigateToInventoryHomePage">
                Back to InventoryHome Page
            </button>
        </div>
        



    </EditForm>
}

    @if(!IsSaved)
    {
        <h4 class="text-danger text-center">@Message</h4>
    }else
    {

        <h4 class="text-success text-center">@Message</h4>
    }
    <br/>
    



@code {

    [SupplyParameterFromForm]
    public Car? Car{ get; set; }

    private List<Inventory> InventoryList { get; set; } = new();

    protected string Message = string.Empty;
    protected bool IsSaved = false;

    protected override async Task OnInitializedAsync()
    {
        Car ??= new();
        InventoryList = (await InventoryDataService!.GetAllInventories()).ToList();
    }

    private async Task OnSubmit()
    {   
        if(Car is not null && Car.InventoryId > 0)
        {
            await CarsDataService!.AddCar(Car);
            IsSaved = true;
            Message = "Car added successfully.";
            ClearForm();

        }
        else
        {
            IsSaved = false;
            Message = "There are some validation errors. Try again!";
        }
    }

    protected void NavigateToInventoryHomePage()
    {
        NavigationManager.NavigateTo("/inventoryhome");
    }

    private void ClearForm() => Car = new();


}
